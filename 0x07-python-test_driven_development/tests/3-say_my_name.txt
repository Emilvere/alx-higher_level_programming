==============================
How to Use 3-say_my_name.py
==============================

This module defines a name-printing function ``say_my_name(first_name, last_name)``.

Usage
=====

The function prints the user's name in the format "My name is [first_name] [last_name]".

::

    >>> say_my_name = __import__('3-say_my_name').say_my_name
    >>> say_my_name("John", "Doe")
    My name is John Doe

::

    >>> say_my_name("Alice", "Johnson")
    My name is Alice Johnson

::

    >>> say_my_name("Eve", "Smith")
    My name is Eve Smith

Arguments
==========

- ``first_name`` (str): The first name to be printed.

- ``last_name`` (str): The last name to be printed.

Both ``first_name`` and ``last_name`` should be non-empty strings. If either argument is empty or not a string, a ValueError is raised.

::

    >>> say_my_name("", "Doe")
    Traceback (most recent call last):
    ValueError: Both first_name and last_name must be non-empty strings

::

    >>> say_my_name("John", 123)
    Traceback (most recent call last):
    ValueError: Both first_name and last_name must be non-empty strings

::

    >>> say_my_name("Alice", "")
    Traceback (most recent call last):
    ValueError: Both first_name and last_name must be non-empty strings

At least two arguments must be provided.

::

    >>> say_my_name("John")
    Traceback (most recent call last):
    TypeError: say_my_name() missing 1 required positional argument: 'last_name'

::

    >>> say_my_name()
    Traceback (most recent call last):
    TypeError: say_my_name() missing 2 required positional arguments: 'first_name' and 'last_name'

Invalid Inputs
=============

If both arguments are valid, but one of them is the string "None" (without quotes), the function will still raise a ValueError.

::

    >>> say_my_name("John", "None")
    Traceback (most recent call last):
    ValueError: Both first_name and last_name must be non-empty strings
